buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}


android {

    compileSdkVersion 27
    buildToolsVersion "26.0.3"

    defaultConfig {
        applicationId "fr.bmartel.fadecandy"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 7
        versionName "1.6"
    }

    //playstore config
    signingConfigs {
        playStore
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }

        release {
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        production {
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.playStore
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

// use ./gradlew -Pbuild=production build to build with playstore keystore & fabric properties
def build_param = "${build}";

if (build_param != "production") {

    //exclude production build
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('production')) {
            variant.setIgnore(true);
        }
    }
} else {
    //exclude all except production build
    android.variantFilter { variant ->
        if (!variant.buildType.name.equals('production')) {
            variant.setIgnore(true);
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('fr.bmartel:fadecandy-service:1.6')
    //compile project(':fadecandy-service')
    compile "com.android.support:appcompat-v7:27.0.2"
    compile 'com.android.support:design:27.0.2'
    compile 'com.android.support:recyclerview-v7:27.0.2'
    compile 'com.larswerkman:HoloColorPicker:1.5'
    compile('org.adw.library:discrete-seekbar:1.0.1')

    compile 'com.koushikdutta.async:androidasync:2.+'

    compile 'com.roughike:bottom-bar:2.0.2'
    compile 'fr.bmartel:opc:1.08'

    compile('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.4@aar') {
        transitive = true;
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}

def Properties props = new Properties()
def propFile = new File('signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
}

if (props.containsKey('STORE_FILE')
        && props.containsKey('STORE_PASSWORD')
        && props.containsKey('KEY_ALIAS')
        && props.containsKey('KEY_PASSWORD')) {
    android.signingConfigs.playStore.storeFile = file(props['STORE_FILE'])
    android.signingConfigs.playStore.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.playStore.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.playStore.keyPassword = props['KEY_PASSWORD']
} else {
    println 'signing.properties not found or incomplete'
    android.buildTypes.release.signingConfig = null
}
